------
- modules :- { array, struct }

ref
[record vs struct vs reference] https://hoven.in/cs-lang/records-in-cs9.html

_________

PyCon 2014 - Std Lib Data structures

Most dangerous data structure in python :- List

Address arithmetic supports :- Records & Arrays

* Records : Sequence of fields in an agreed order in memory
  -----
   -> immutable class alike
   -> A record is a data structure for storing a fixed number of elements

* C structure via Python :
  ------------------
   module name :- struct 
                   \
                    - pack, unpack

   struct can be useful for doing binary conversation with C library or I/O

* Array :
  ----
   given array item is b bytes long :- a + bi

   module in python :- array 

   Python have specialized arrays :- str, unicode, memoryview, bytearray, bytes

* Numpy :
  ----
   - for math
   -> without building intermediate python objects it does computation
      \
       Eg sum() on 100 float objects

   Competitor to Numpy :- Blaze


=> In Python all objects are general purpose obj because Python is dynamic type language
   as All things in python is objects 

   & So its quite slow

=? All of python general purpose data structure stores the addresses

* list :
  ----
   -> can grow as required

   => Reallocation :
      ______ 
       -> reallocation is expensive
          each item address needs to be copied to its new home.

   => There is always 1 extra slot at the end of list 
      because otherwise at every append it will require Reallocation 
      & Reallocation is very expensive 

   => So append() on full lists asks for extra item slots 
      &
      Desiginning Data Structure this way is called amortization
      (as it spreads cost (of reallocation) over time)

   * Amortization
     ___________
      -> When list is full i.e let say 900
         &
         you add 1 more so it will ask for extra 130 slots 

         So 901th append will need reallocation for all 901 elements
         but next 130 elements can be appended at 0 costs 

         this is known as amortization

* Speed vs Space tradeoff :
  ----------------

  => Python lists on average, use 94% of their slots 
      - consuming 6% more space than they use 

     By this way they are fast !!!


* Slicing :
  -------
   - copy new data or give a view 

   - python list :- copy new data & provide new list
            numpy :- provides a view instead

* dict :
  -----
   - dict grows by doubling or quadrupling its size 
   - So resize cost is amortized !!

   speed vs space tradeoff :-
   ----
   slots in dictionary on average are empty by 1/3 at any given time
   So at any time 2/3 of slots are full by dictionary 

   => because dict assigns the key to array indexes by hash, 
      it iterates in arbitary order.

* Set :
  ---
   dict with keys only

* Classes :
  ------
   by default each attribute is a key in `obj.__dict__`

   but if you pre-specify : __slots__ then classes are implemented as a struct (record)

-----------

Q) Fetching a range !!!

* bisect :
  ------
  module name :- bisect 
   
   bisect_left, bisect_right

   To get a range of numbers with lower & upper bound using bisect : 
    bisect utilise thee binary search & narrow us to get our required range values.

* deque :
  -----
   - both end 
   - DS secretley behind Queue

* stack :
  ----
   at 1 end only 

* heapq :
  ----
   -> heapq lets you fetch top t of n items in O(t+n) time
   -> pop & push very quickly (O(logn)) time 
   -> nlargest() & nsmallest()
         \
          -> both avoid sorting entire sequence  in (O(n+t))

* Priority Queue :
  ------------
   -> A heapq with locks,
      So threads can cooperate on a prioritized work pile

* sched.scheduler :
  ------------
   -> a heapq that tells you when the next task is due to run.


---------

Linked-List, Doubly-Linked List, Trees ::
 
  all these makes sense less with python because 
  Python stores only addresses & these data structure deals with data as well.
 
 => Both deque & OrderedDict do have secretley Doubly Linked list inside

 -> other linked lists are hidden under the memory allocation layer 

 => since all your python objects are already inside malloc()-style linked lists. (list that can dynamically allocate memory)
    (ie all general DS in python is storing references ie address itself)
    adding further level of linking is redundant

* Trees :
  ----
   - Imp where data is tree shaped 

   -> are esp useful to represent the sequential data that is constantly changes
      or changes often ie in & out of data very often in that sequence

      we have outsource tree to data persistence layer (such as MongoDB, PostGreSql)

      because MongoDB - have B-Tree innternally
              PostgreSQL - have B-Tree internally
              SQlite     - B-tree !
              CoucheDB   - B-tree !



* Struct :
    A struct, or structure, in C is a custom data type that groups together different data types. 
    To compare to object-oriented languages, itâ€™s like a class with attributes and no methods.